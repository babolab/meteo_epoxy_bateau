# -*- coding: utf-8 -*-
"""meteo_agricole.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rdbc5vkcGK1Iic1cQyfbopU7N0OH9Y_G

Ce script servira à récupérer et afficher les données météo utiles pour les agriculteurs.

# Données d'humidité du sol
"""

import requests
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime
import locale
import os
import shutil

# Définir la locale en français
locale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')

# Fonction pour déplacer les fichiers PNG vers le sous-dossier "archive"
def move_png_to_archive():
    # Créer le sous-dossier "archive" s'il n'existe pas
    if not os.path.exists('archive'):
        os.makedirs('archive')

    # Déplacer tous les fichiers PNG vers le sous-dossier "archive"
    for filename in os.listdir('.'):
        if filename.endswith('.png'):
            shutil.move(filename, 'archive')

# Appeler la fonction pour déplacer les fichiers PNG
move_png_to_archive()

# Coordonnées géographiques (La Mare)
latitude = 48.53874483802106
longitude = 1.870632145777986

# URL de l'API Open-Meteo
url = "https://api.open-meteo.com/v1/ecmwf"

# Paramètres de la requête
params = {
    "latitude": latitude,
    "longitude": longitude,
    "hourly": "soil_moisture_0_to_7cm,soil_moisture_7_to_28cm",
    "forecast_days": 16,
    "timezone": "auto"
}

# Récupérer les données
response = requests.get(url, params=params)

if response.status_code == 200:
    data = response.json()
    # Convertir en DataFrame Pandas
    df = pd.DataFrame(data['hourly'])
    df['time'] = pd.to_datetime(df['time'])  # Conversion des dates
else:
    print("Erreur lors de la récupération des données :", response.text)

# Paramètres du sol (à ajuster selon le type de sol)
Hcc = 0.4  # Capacité au champ (m³/m³)
HpF = 0.1  # Point de flétrissement (m³/m³)

# Conversion des humidités volumiques en pourcentage utilisable
df['soil_moisture_0_to_7cm_percent'] = ((df['soil_moisture_0_to_7cm'] - HpF) / (Hcc - HpF)) * 100
df['soil_moisture_7_to_28cm_percent'] = ((df['soil_moisture_7_to_28cm'] - HpF) / (Hcc - HpF)) * 100

# Tracer les données converties
plt.figure(figsize=(12, 6))
plt.plot(df['time'], df['soil_moisture_0_to_7cm_percent'], label="0-7 cm")
plt.plot(df['time'], df['soil_moisture_7_to_28cm_percent'], label="7-28 cm")

# Ajouter des détails au graphique
plt.title("Prévisions d'humidité du sol utilisable (%)")
plt.xlabel("Temps")
plt.ylabel("Humidité utilisable (%)")
plt.legend()
plt.grid()

# Modifier le format des dates en norme française
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
plt.gcf().autofmt_xdate()

# Obtenir la date et l'heure actuelles
now = datetime.now()
date_str = now.strftime('_%d_%B_%Hh%M')

# Sauvegarder le graphique avec la date et l'heure dans le nom de fichier
plt.savefig(f'humidité_du_sol{date_str}.png', dpi=400, bbox_inches='tight') 
